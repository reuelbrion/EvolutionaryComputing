package ec;

import org.vu.contest.ContestSubmission;
import org.vu.contest.ContestEvaluation;

import java.util.Random;
import java.util.Properties;
//test
public class SubmissionTemplateKladReuel implements ContestSubmission
{
	private Random rnd_;
	private ContestEvaluation evaluation_;
	private int evaluations_limit_;

	public SubmissionTemplateKladReuel()
	{
		rnd_ = new Random();
	}

	public void setSeed(long seed)
	{
		// Set seed of algortihms random process
		rnd_.setSeed(seed);
	}

	public void setEvaluation(ContestEvaluation evaluation)
	{
		// Set evaluation problem used in the run
		evaluation_ = evaluation;

		// Get evaluation properties
		Properties props = evaluation.getProperties();
		evaluations_limit_ = Integer.parseInt(props.getProperty("Evaluations"));
		boolean isMultimodal = Boolean.parseBoolean(props.getProperty("Multimodal"));
		boolean hasStructure = Boolean.parseBoolean(props.getProperty("GlobalStructure"));
		boolean isSeparable = Boolean.parseBoolean(props.getProperty("Separable"));

		// Change settings(?)
		if(isMultimodal){
			// Do sth
		}else{
			// Do sth else
		}
	}

	public void run()
	{
		// Run your algorithm here

		int evals = 0;
		
		//set random values for starting array
		double[][] population = initPopulation(); 
		
		while(evals<evaluations_limit_)
		{
			// Select parents
			int[] bestParents = {0,1};
			Double[] parentFitness = {(Double)evaluation_.evaluate(population[0]), (Double)evaluation_.evaluate(population[1])};
			for (int i = 2; i < population.length; i++)
			{
				if((Double)evaluation_.evaluate(population[i]) > parentFitness[0])
				{
					
				}
				else if((Double)evaluation_.evaluate(population[i]) > parentFitness[1])
				{
					
				}
			}	
			
			// Apply variation operators and get children
			//	double child[] = ...
			
	  		Double fitness = (Double)evaluation_.evaluate(darray);
			evals++;
			System.out.println(fitness + " - ");
			// Select survivors
		}
	}
	
	public double[][] initPopulation()
	{
		double[][] output = new double[10][10];
		for (int i = 0; i < output.length; i++)
		{
			output[i] = makeRandomDoubleArray();
		}		
		return output;
	}
	
	public double[] makeRandomDoubleArray()
	{
		double randDub;
		Random rand = new Random();
		double[] output = new double[10];
		for (int i = 0; i < output.length; i++)
		{
			randDub = rand.nextDouble();
			randDub *= 10d;
			randDub -= 5d;
			output[i] = randDub;
		}		
		
		return output;
	}
}

